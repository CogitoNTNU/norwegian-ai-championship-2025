[
{
"name": "obc-check-button",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/input-chip/input-chip.js';"
],
"description": "The obc-check-button is a versatile toggle component specifically designed for managing state rather than triggering actions. It provides two distinct interaction patterns for different use cases, focusing on on/off, enabled/disabled, and selected/unselected states rather than executing commands or operations. It features two primary variants: regular and checkbox, each designed for specific state management scenarios. Regular Type: This variant functions as a toggle button where the entire button changes color to indicate its checked/unchecked state. It's ideal for equipment controls, system modes, and feature toggles where users need clear visual feedback about operational status. An optional icon can be included to provide context about the button's function - the same icon is used for both states, with the button's background color serving as the primary state indicator. This makes it perfect for controls where the state change is communicated through the button's visual appearance rather than icon transformation. The icon is controlled through the showIcon property and uses the 'icon' slot. Checkbox Type: This variant displays a traditional checkbox container but allows for custom icons within the checked and unchecked states. Unlike the simpler obc-checkbox component (which provides standard checkbox functionality with fixed check/mixed/unchecked icons), the checkbox type of check-button enables users to slot their own meaningful icons for both states. Custom icons are provided through the 'checked-icon' and 'unchecked-icon' slots, allowing for semantic icon changes such as microphone mute/unmute (showing microphone vs. muted microphone icons), volume on/off, or communication system active/inactive states. If no custom icons are provided, it falls back to default checkbox icons (obi-checkbox-checked-filled for checked state and obi-checkbox-uncheck-google for unchecked state). The checkbox container provides familiar interaction patterns while the custom icons give immediate context about what the toggle controls. Icon Slot Usage: For checkbox type, developers can customize both states using: checked-icon slot for the active/selected state icon, and unchecked-icon slot for the inactive/unselected state icon. The component automatically switches between these slotted icons based on the current checked state, providing clear visual feedback about the current setting. Key Differentiators from obc-checkbox: While the standard obc-checkbox component is designed for simple selection tasks with built-in check marks and mixed states, the check-button's checkbox type allows complete customization of the icons within the checkbox frame. The check-button also provides the hugText property for width control (fitting content vs. full width), width property for specific sizing, and showIcon control for the regular type - features not available in the basic checkbox component. State Management Focus: The component operates as a controlled element for managing binary states, requiring developers to implement their own event handling through the check-button-click event to create functional behavior. This design pattern ensures proper integration with larger systems while maintaining clear separation between UI state and business logic. Unlike action buttons that execute commands, check-buttons are specifically designed for persistent state management where the visual feedback indicates the current setting or mode."
},
{
"name": "obc-elevated-card",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/elevated-card/elevated-card.js';"
],
"description": "The obc-elevated-card is a versatile container component that provides elevated styling for displaying content in card-based layouts. It serves as the foundation for many other components and can function as both interactive and display-only elements depending on configuration. Core Functionality: The component supports multiple content areas through slots including leading-icon, label, description, status, trailing-icon, graphic, and action. It automatically adapts its HTML element type based on usage - rendering as a button for interactions, anchor for links, or article for display-only content. The component handles various visual states and sizes to accommodate different content types and interface requirements. Flexible Sizing and Positioning: Three size variants control content layout - single-line for compact entries, double-line for items with status information, and multi-line for detailed descriptions. Position options (regular, top, center, bottom) enable visual connection when cards are grouped together, creating seamless card stacks and connected interfaces. Visual Features: The component supports graphics headers, optional borders, info styling variants, and customizable positioning. Graphics can be displayed with or without borders at the top of the card, while the info variant provides alternative styling for special content types. Border options help create visual separation or connection depending on interface needs. Foundation Component: This component serves as the building block for enhanced card variants like obc-elevated-card-radio. It provides the core elevated card functionality that other components extend with specific behaviors. Future implementations may include obc-elevated-card-stack, which would function as a dropdown container creating multiple connected elevated cards in a grouped layout, similar to how obc-elevated-card-radio-group manages radio button collections. Use Cases: Perfect for navigation menus, settings panels, content lists, information displays, action panels, and any interface requiring card-based organization. Use for both clickable items (navigation, selection) and display content (information, status). The flexible slot system makes it adaptable to diverse content types while maintaining consistent visual presentation. Interactive Modes: Can render as interactive buttons, navigation links, or static content displays. The href property enables link functionality, while the notClickable property forces display-only behavior. Action buttons can be integrated for secondary interactions within cards, and custom events handle user interactions across different interaction patterns."
},
{
"name": "obc-radio",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/radio/radio.js';"
],
"description": "The obc-radio is a standard radio button component that provides the foundation for single-selection form inputs. It offers both standalone radio buttons and labeled radio buttons, maintaining proper form semantics and browser radio button group management through light DOM rendering. Core Functionality: The component renders a standard HTML radio input with enhanced styling and optional label integration. When a label is provided, it creates a clickable label element that properly associates with the radio input. Without a label, it renders a standalone radio button suitable for custom layouts or integration into other components like obc-elevated-card-radio. Light DOM Architecture: The component deliberately renders into light DOM rather than shadow DOM to ensure proper radio button group behavior. This allows the browser to correctly manage mutual exclusivity between radio buttons that share the same name attribute, which is essential for proper radio button group functionality across multiple component instances. Use Cases and When to Choose: Use obc-radio for standard form inputs where you need basic radio button functionality without enhanced visual styling. Ideal for compact forms, simple option selection, embedded selection within other components, or when you need the minimal footprint of traditional radio buttons. Choose this over elevated card radios when space is limited, when building custom radio interfaces, or when the selection options don't need prominent visual emphasis. Form Integration: The component supports all standard radio button properties including name (for grouping), value, checked state, disabled state, and required validation. The inputId property allows for proper label-input association when using the labeled version. Multiple radio buttons with the same name automatically form a group with mutual exclusivity. Component Foundation: This component serves as the underlying input element for more complex radio interfaces like obc-elevated-card-radio. When building custom radio button layouts or integrating radio functionality into other components, obc-radio provides the reliable form foundation while allowing complete control over the surrounding presentation and interaction patterns."
},
{
"name": "obc-elevated-card-radio",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/elevated-card-radio/elevated-card-radio.js';"
],
"description": "The obc-elevated-card-radio is a form input component that combines an elevated card container with radio button functionality, creating a more visual and touch-friendly alternative to standard radio buttons. It renders an interactive card that users can click anywhere on to select the radio option. The component integrates an obc-radio element within an obc-elevated-card to provide enhanced visual presentation while maintaining proper radio button form behavior. Core Functionality: The component wraps an obc-radio element within an obc-elevated-card, placing the radio button in the leading-icon slot and the label text in the label slot. The entire card surface is clickable, making it easier to interact with on touch devices or when larger target areas are needed. When clicked, it triggers the underlying radio input selection. Use Cases and When to Choose: This component is ideal when you need radio button functionality but want a more prominent, modern interface that's easier to interact with. Perfect for configuration panels, settings screens, mode selection interfaces, equipment selection, or any scenario where you want to present options as distinct, selectable cards rather than small radio buttons. Particularly effective for touch interfaces, accessibility improvements (larger click targets), or when you want to display options with more visual hierarchy and spacing. The elevated card styling makes it suitable for important selection decisions that need visual emphasis. Choose this over standard obc-radio when you want enhanced visual prominence and larger interaction areas. How to Use: Individual elevated card radios are typically used within forms or selection interfaces. Set the name property to group related options, assign unique values to each option, and use the checked property to indicate the selected state. The component works best when multiple instances share the same name to create proper radio button groups. For positioning in connected groups, use the position property (top, center, bottom) to create visually connected card sequences. Card Integration: The component inherits the visual properties of elevated cards, including position styling (top, center, bottom), size options, and border configurations. This allows radio buttons to be styled consistently with other elevated card elements while maintaining proper form input behavior and accessibility features. Form Properties: Standard radio button properties are supported including name (for grouping), value, checked state, disabled state, and required validation. The component maintains proper form semantics and accessibility features while providing the enhanced visual presentation of the elevated card container. Light DOM Rendering: The component renders into light DOM rather than shadow DOM, ensuring proper form integration and accessibility. Each instance generates a unique ID to maintain proper label-input associations and form functionality across multiple radio button instances."
},
{
"name": "obc-elevated-card-radio-group",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/elevated-card-radio-group/elevated-card-radio-group.js';"
],
"description": "The obc-elevated-card-radio-group creates visually connected groups of elevated card radio buttons from a simple options array. Instead of manually creating and positioning multiple elevated card radio components, this component automatically generates a complete radio group with proper visual connection and form behavior. Core Function: Provide an options array and the component creates individual elevated card radio buttons, handles their visual positioning to appear connected, manages radio grouping with mutual exclusivity, and coordinates state across the entire group. Each option becomes a clickable elevated card with radio button functionality. Use Cases: Perfect for 3-6 related choices that need prominent visual presentation - system modes (Auto/Manual/Override), configuration options, operational states, or priority levels. Use when you want the enhanced visual impact of elevated card radio buttons without managing multiple components manually. How to Use: Pass an options array with label and value properties, set a group name, and optionally specify a pre-selected value. The component handles the rest - creating connected cards, managing selection state, and dispatching change events. Listen for change events to respond to user selections and integrate with form systems."
},
{
"name": "obc-command-button",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/command-button/command-button.js';"
],
"description": "The obc-command-button is a specialized button component designed for command and control operations. It provides a simple, visual indicator of command state through automatic icon switching and is typically used in conjunction with the obc-command-menu component for comprehensive command management interfaces. Core Functionality: The component displays one of two built-in command icons based on the inCommand boolean property - showing a command-in icon when in command mode and a command-no icon when not in command. The visual state automatically updates to reflect the current command status, providing immediate feedback about operational control. The button renders as a clickable element that can trigger command-related actions or state changes. Command State Indication: The component serves as a visual indicator and interactive element for command control systems. When inCommand is true, it displays the command-in icon (typically showing active command status), and when false, it shows the command-no icon (indicating no command or released state). This automatic icon switching eliminates the need for manual icon management while ensuring consistent visual communication of command states. Integration with Command Menu: The command button is designed to work alongside the obc-command-menu component, often serving as a compact representation or trigger for more detailed command interfaces. While the command menu provides comprehensive command management with detailed status information and controls, the command button offers a minimal footprint solution for displaying and interacting with command states in space-constrained interfaces like top bars, toolbars, or status indicators. Minimal Design: This is a streamlined version of command interface components, focusing specifically on the essential command state indication without additional customization options. The component automatically handles icon selection and styling based on the command state, making it ideal for situations where consistent, standardized command indication is needed without the complexity of fully customizable command interfaces."
},
{
"name": "obc-command-menu",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/command-menu/command-menu.js';"
],
"description": "The obc-command-menu is a comprehensive and highly adaptable command and control interface component that provides detailed command status information and interactive controls for managing operational command states. It is designed to be tailored to specific application types and provides a comprehensive view of current command and control mode status. The component works in tandem with the obc-command-button to create complete command management workflows. Core Functionality: The component displays detailed command information including status, description, and optional location data, while providing interactive controls for taking or releasing command through an integrated start-stop switch. The inCommand property controls the overall state, while hasLocation determines whether location information is displayed. The component uses multiple slots to allow complete customization of command details and control labels. Adaptive Design: The command menu should be tailored to the specific application type to provide the most relevant and comprehensive view of command and control mode status. This means the component can present different layouts, information hierarchies, and control options depending on the operational context - from simple single-command scenarios to complex multi-system command structures with subsystems, partial command states, and location-specific controls. Command Information Display: The menu presents command data through several content slots - command-icon for visual identification, command-status for current state, command-description for detailed information, and command-location for station or system location. This structured approach allows for rich, contextual information about the command being managed while maintaining consistent layout and visual hierarchy across different application contexts. Interactive Command Control: The component includes an integrated obc-start-stop-switch that handles the actual command state toggling. Multiple slots control the switch behavior and labeling: toogle-action-to-in-command-label and toogle-action-to-no-command-label for action buttons, toogle-state-in-command-label and toogle-state-no-command-label for status display, and toogle-state-in-command-icon for custom state iconography. This provides complete control over the command interaction workflow while adapting to different operational requirements. Event Handling and Integration: The component dispatches change events with inCommand boolean values when the command state is modified through the integrated switch. This allows parent components to respond to command changes and update related systems or interfaces accordingly. The event-driven architecture ensures proper integration with larger command and control systems while supporting various application-specific command management patterns."
},
{
"name": "obc-button",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/button/button.js';"
],
"description": "The obc-button is a versatile button component designed for triggering actions and commands rather than managing state. It supports multiple visual styles and flexible icon configurations for executing one-time operations like form submissions, navigation, command execution, and workflow triggers. It can render as either a standard button element or as a link when an href is provided, making it adaptable to various interaction patterns. Visual Variants and Priority: The component offers three distinct visual styles that establish clear action hierarchy - normal for standard actions, flat for subtle secondary actions, and raised for primary or prioritized actions that require emphasis. The raised variant is specifically used when you have multiple actions side by side and need to indicate which is the primary choice. For example, in OK/Cancel button pairs, the OK button would use raised style to show it's the preferred action, while Cancel remains normal or flat. This visual prioritization helps users quickly identify the most important action in any given context. Icon Integration: The button supports optional leading and trailing icons through dedicated slots, with boolean properties (showLeadingIcon and showTrailingIcon) controlling their visibility. Icons can be used independently or together, allowing for flexible visual communication - leading icons often indicate the action type while trailing icons might show state or direction. The component automatically adjusts spacing and layout based on which icons are present. Properties and Configuration: Key properties include variant for styling (normal, raised, flat), fullWidth for layout control, disabled for interaction states, and href/target for link behavior. When href is provided, the component automatically renders as an anchor element while maintaining the same visual appearance and API. Action-Oriented Design: Unlike toggle components that manage on/off states, this button is specifically designed for executing discrete actions. Whether submitting forms, opening dialogs, navigating to new pages, or triggering system operations, the button provides clear visual feedback about actionable elements while maintaining consistent interaction patterns across different contexts and use cases."
},
{
"name": "obc-checkbox",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/checkbox/checkbox.js';"
],
"description": "The obc-checkbox is a standard form input component designed for selection and state indication. It provides a clean, accessible checkbox implementation with three distinct states: checked, unchecked, and mixed (indeterminate). Core Functionality: This component renders a traditional checkbox with a built-in label system, using standard checkmark icons for visual state indication. The checked state displays a filled checkmark icon, unchecked shows an empty checkbox, and mixed state shows a dash/minus icon - ideal for hierarchical selections where a parent checkbox represents a partially selected group of child items. Professional Interface Design: Unlike basic HTML checkboxes, this component is specifically designed for professional environments with enhanced accessibility features, proper ARIA attributes, and keyboard navigation support (spacebar activation). The component includes built-in focus management, screen reader compatibility, and follows maritime interface standards for touch targets and visual clarity. Use Cases: The checkbox is perfect for simple binary selections such as enabling/disabling system features, selecting items from lists, confirming operational procedures, or managing user preferences. The mixed state is particularly valuable in complex interfaces where users need to manage hierarchical selections - for example, selecting equipment groups where some individual items are active and others are inactive. Key Differentiators from obc-check-button: While the obc-check-button provides extensive customization with different visual styles and custom icon slots, the obc-checkbox focuses on standard checkbox behavior with minimal configuration. It includes a built-in label property, automatic state management with proper event dispatching, and doesn't require custom styling or icon management. The checkbox component is ideal when you need reliable, accessible form input behavior without the complexity of custom visual states or the button-like appearance of the check-button component. The component automatically handles state transitions, dispatches appropriate change events, and maintains proper disabled state behavior. It's designed as a drop-in solution for forms and selection interfaces where standard checkbox functionality is sufficient, providing the reliability and accessibility required for professional operational environments without the overhead of extensive customization options."
},
{
"name": "obc-input-chip",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/input-chip/input-chip.js';"
],
"description": "The obc-input-chip is a removable display component that appears as a compact, pill-shaped element containing a text label and a close icon. It provides a simple way to show individual items that users can remove by clicking anywhere on the chip. Core Functionality: The component displays a text label alongside a close (X) icon. The entire chip is clickable - when clicked anywhere, it dispatches a remove-chip event containing the chip's label, allowing parent components to handle the removal action. Visual Elements: The chip includes an optional leading icon slot (controlled by the showIcon property) that can display any slotted content to provide visual context for the label. The close icon is always displayed on the right side to indicate the chip's removable nature. Interaction Pattern: The component is designed around a single action - removal. The entire chip surface is interactive, so users can click anywhere on it to trigger removal. It communicates its label back to the parent component through an event, enabling the parent to update its data or interface accordingly. The component can be disabled to prevent removal when needed."
},
{
"name": "obc-filter-chip",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/filter-chip/filter-chip.js';"
],
"description": "The obc-filter-chip is a simple toggleable selection component that functions as a clickable pill-shaped button with checked and unchecked states. It provides clear visual feedback when toggled, making it useful for basic on/off selection interfaces where users need to enable or disable individual options. Core Functionality: This component acts as a standalone toggle control that maintains its own checked/unchecked state. When unchecked, it appears in a subdued state with an optional custom icon. When checked, it becomes visually prominent and automatically displays a checkmark icon alongside any custom icon, providing immediate feedback about its active status. Interaction Pattern: Users click the chip to toggle between states, and the component automatically updates its visual appearance and dispatches a chip-toggle event with the new state information. This allows parent components to respond to state changes as needed for their specific functionality. Icon Integration: The component supports an optional custom icon through a slot (controlled by the showIcon property) that can provide visual context about what the chip represents. When checked, both the custom icon and an automatic checkmark can be displayed together."
},
{
"name": "obc-user-button",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/user-button/user-button.js';"
],
"description": "The obc-user-button is a circular user avatar component designed to represent individual users. It provides a compact, recognizable way to display user identity and can function as either an interactive button or a static display element. Core Functionality: The component displays user information in a circular container with two content options: user initials (up to 2 characters, automatically formatted to uppercase) or a user icon. When configured as interactive, it renders as a clickable button suitable for triggering user menus, profile access, or authentication workflows. When set to static mode, it serves as a pure display element for user identification. Visual Variants: The component offers two primary variants - initials mode displays user-provided initials in a clean, readable format, while icon mode shows either a slotted custom icon or falls back to a default user icon. The initials are automatically processed to remove whitespace, convert to uppercase, and truncate to 2 characters if longer input is provided. Style Options: Three visual styles are available to match different interface contexts: flat for subtle integration, normal for standard prominence, and selected for indicating active or focused user states. These styles allow the component to adapt to various interface requirements while maintaining consistency. Professional Integration: The component includes proper accessibility features with ARIA labels and supports disabled states for system maintenance or restricted access scenarios. An optional label property can display the user's name alongside the avatar, useful in user management interfaces or detailed user listings. Interactive Modes: The static property controls whether the component renders as an interactive button element or a display-only div element. This flexibility allows the same component to serve both navigation purposes (clickable for user menus) and identification purposes (static display in lists or headers) within operational interfaces. The user button serves as a standard building block for user identification and interaction."
},
{
"name": "obc-app-button",
"import-paths": [
"import '@oicl/openbridge-webcomponents/dist/components/app-button/app-button.js';"
],
"description": "The obc-app-button is a circular icon-based button component designed for application navigation and action triggers. It always renders as a clickable button element, providing consistent interactive behavior across all use cases. Core Functionality: The component displays a custom icon within a circular container with a text label positioned below it. The icon content is customizable through the icon slot, allowing any icon or symbol to be displayed. The component includes a checked state that provides visual feedback for active or selected applications, and supports two size variants - normal and small - to accommodate different layout requirements and interface densities. Properties and Configuration: The component accepts a label property for the text displayed below the icon, a checked boolean property for indicating active/selected state, and a size property that can be set to either 'normal' or 'small'. The checked state changes the visual appearance to clearly indicate when an application or feature is currently active or selected. Interactive Design: As a button element, it supports standard button interactions including click events, focus states, and accessibility features. The consistent circular design with customizable icons makes it ideal for application launchers, feature toggles, system controls, and navigation elements where users need clear visual feedback about interactive elements and their current states. Integration Patterns: The component is commonly used in application grids and menus (such as with a grid icon for launching app selection interfaces), toolbar controls, and as contextual action buttons within larger interface components. The size variants allow it to adapt to different interface contexts - normal size for primary application launchers and feature controls, and small size for compact toolbars or secondary actions. Visual Consistency: The circular design maintains visual harmony across different contexts while the checked state and size options provide the flexibility needed for various interface requirements. Whether used for launching applications, toggling system features, or triggering specific actions, the component ensures consistent user interaction patterns throughout operational interfaces."
}
]